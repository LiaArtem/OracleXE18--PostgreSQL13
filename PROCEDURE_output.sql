-- Generated by Ora2Pg, the Oracle database Schema converter, version 21.1
-- Copyright 2000-2020 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=DESKTOP-KNCPJAN;sid=XE;port=1521

SET client_encoding TO 'UTF8';

SET search_path = test_user,public;


CREATE OR REPLACE PROCEDURE test_user.http_request (p_url text, -- url
 p_url_method text default 'POST', -- url method (POST, GET)
 p_url_http_version text default 'HTTP/1.1', -- url http version
 p_url_https_host text default null, -- url https host
 p_header_authorization text default null, p_header_content_type text default 'application/json', -- text/xml
 p_header_body_charset text default 'UTF-8', -- WINDOWS-1251
 p_wallet_file text default null, p_wallet_file_pwd text default null, p_proxy text default null, -- '10.2.1.250:8888'
 p_proxy_username text default null, p_proxy_password text default null, p_transfer_timeout numeric default 60, p_request_body text default null, -- тело запроса
 p_response_body INOUT text DEFAULT NULL, -- ответ (тело)
 p_response_status_code INOUT numeric DEFAULT NULL, -- ответ (код состояния)
 p_response_status_desc INOUT text -- ответ (описание состояния)
  DEFAULT NULL) AS $body$
DECLARE

  m_http_response            UTL_HTTP.resp;
  m_http_request             UTL_HTTP.req;
  m_buffer_offset            numeric;
  m_buf                      varchar(32767);
  m_buffer_size              numeric := 32767;
  m_read_buffer_size         numeric := m_buffer_size;
  m_response                 text;
  m_buff_chunked             numeric;
BEGIN
    -- для HTTPS хранение сертификата
    if p_wallet_file is not null
    then
       utl_http.set_wallet('file:'||p_wallet_file, p_wallet_file_pwd);
    end if;
    -- прокси
    if p_proxy is not null
    then  
       utl_http.set_proxy(proxy => p_proxy, no_proxy_domains => null);
    end if;

    -- формирование запроса  
    utl_http.set_response_error_check(false); -- true проверка ошибок ответа, false не проверять
    utl_http.set_transfer_timeout(p_transfer_timeout); -- длительность транзакции
    m_http_request := utl_http.begin_request(url          => p_url,
                                             METHOD       => p_url_method, 
                                             HTTP_VERSION => p_url_http_version, 
                                             https_host   => p_url_https_host
                                             );

    -- Authorization включает в себя данные пользователя для проверки подлинности пользовательского агента с 
    -- сервером обычно после того, как сервер ответил со статусом 401 Unauthorized и заголовком WWW-Authenticate (en-US).
    if p_header_authorization is not null
    then
      utl_http.set_header(m_http_request, 'Authorization', p_header_authorization);
    end if;
    if p_header_content_type is not null
    then  
       utl_http.set_header(m_http_request, 'Content-Type', p_header_content_type);
    end if;
    if coalesce(octet_length(p_request_body),0) > 0
    then  
       utl_http.set_header(m_http_request, 'Content-Length', octet_length(p_request_body));
    end if;
    if p_header_body_charset is not null
    then  
       utl_http.set_body_charset(m_http_request, p_header_body_charset);
    end if;

    -- прокси
    if p_proxy is not null and p_proxy_username is not null
    then  
       utl_http.set_authentication(r        => m_http_request,
                                   username => p_proxy_username,
                                   password => p_proxy_password,
                                   for_proxy => true);
    end if;

    <<Repeated_Send>>
        
    -- отправка
    m_buff_chunked := coalesce(ceil(octet_length(p_request_body) / m_buffer_size),0);
    if m_buff_chunked > 1
    then
       utl_http.set_header(m_http_request, 'Transfer-Encoding', 'chunked');
    end if;
    
    m_buffer_offset := 1;
    for i in 1..m_buff_chunked
    loop
      dbms_lob.read(p_request_body, m_read_buffer_size, m_buffer_offset, m_buf);
      m_buffer_offset := m_buffer_offset + m_read_buffer_size;
      utl_http.write_text(m_http_request, m_buf);
    end loop;

    -- чтение ответа
    m_http_response := utl_http.get_response(m_http_request);
    if m_http_response.status_code = 100 -- Ожидание
    then
      dbms_lock.sleep(10);
      goto Repeated_Send;
    end if;

    dbms_lob.createtemporary(m_response, true);
    begin
      loop
         utl_http.read_text(m_http_response, m_buf);
         dbms_lob.writeappend(m_response, length(m_buf), m_buf);
      end loop;
    exception when utl_http.end_of_body then
        utl_http.end_response(m_http_response);
              when utl_http.too_many_requests then
        utl_http.end_response(m_http_response);
    end;
    
    -- пишем ответ
    p_response_body := m_response; -- out
    dbms_lob.freetemporary(m_response);
    
    -- дозакрываем соединения
    if m_http_request.private_hndl is not null
    then
       utl_http.end_request(m_http_request);
    end if;

    if m_http_response.private_hndl is not null
    then
       utl_http.end_response(m_http_response);
    end if;
        
    p_response_status_code := m_http_response.status_code; -- out
    p_response_status_desc := m_http_response.reason_phrase; -- out
  exception when others
  then
      if m_http_request.private_hndl is not null
      then
         utl_http.end_request(m_http_request);
      end if;

      if m_http_response.private_hndl is not null
      then
         utl_http.end_response(m_http_response);
      end if;

      p_response_status_code := -100; -- out
      p_response_status_desc := dbms_utility.format_error_stack||dbms_utility.format_error_backtrace; -- out
end;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE test_user.http_request (p_url text, p_url_method text default 'POST', p_url_http_version text default 'HTTP/1.1', p_url_https_host text default null, p_header_authorization text default null, p_header_content_type text default 'application/json', p_header_body_charset text default 'UTF-8', p_wallet_file text default null, p_wallet_file_pwd text default null, p_proxy text default null, p_proxy_username text default null, p_proxy_password text default null, p_transfer_timeout numeric default 60, p_request_body text default null, p_response_body INOUT text DEFAULT NULL, p_response_status_code INOUT numeric DEFAULT NULL, p_response_status_desc INOUT text DEFAULT NULL) FROM PUBLIC;



CREATE OR REPLACE PROCEDURE test_user.read_wallet_param (p_wallet_file INOUT text, p_wallet_file_pwd INOUT text) AS $body$
BEGIN
  p_wallet_file := 'C:\app\Admin\product\18.0.0\admin\XE\wallet';
  p_wallet_file_pwd := '34534kjhsdffkjsdfgalfgb###';
end;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE test_user.read_wallet_param (p_wallet_file INOUT text, p_wallet_file_pwd INOUT text) FROM PUBLIC;

